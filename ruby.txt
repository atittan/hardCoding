parentheses=bracket=()

print "string" 그냥 프린트
puts "string" 프린트후 endl

1라인 주석 #

멀티라인 주석 {주의사항, =(띄우면안됌)being}
=begin
=end


first_name.capitalize!
!는 자기자신을 가리킴
state2=state.upcase로 쓸수도있다


elsif

루비의 update연산자
+=
-=

while문은 조건이 true일때 계속 돌다가 false가 되면 멈춘다.

utill 문은 반대로 false일때 돌다가 true 가 되면 멈춘다.

for i in 1...5 exclusive 5는 뺀다
for i in 1..5 include 5까지 포함

loop 는 조건문이 따로 없고 카운터 i와 break if 문을 따로 둔다


object.each { |item| # Do something }

object.each do |item| # Do something end

user_input.include? "string"
string을 포함하는지 bool 리턴

user_input.gsub!(/s/,"th")  자기자신을 뜻하는 ! 를 기억!
global substitution (입력받은 s는 모두 th로 변화)

multi_d_array.each { |x| puts "#{x}\n" }


다차원 배열의 each문을 이용한 iterating
1st : s.each { |sub_array| sub_array.each { |x| puts x} }

2nd :

s.each do |sub_array|
	sub_array.each do |y|
		put y
	end
end




two way of hash

1)
prices = { 
  "apple" => 0.52,
  "banana" => 0.23,
  "kiwi" => 1.42
}


2)
sounds = Hash.new
sounds["dog"] = "woof"
sounds["cat"] = "meow"

hash의 인덱스는 x[0]에
키값은 x[1]에 저장되는 듯 하다.

3)
Hash[("a".."z").to_a.zip((1..26).to_a)]




노노 키와 값을 부르는법

family.each { |x, y| puts "#{x}: #{y}" }

h= Hash.new("nothing here")
hash 의 default value
존재하지 않는 키에 접근하면 default value를 리턴한다.


@has의 sorting하는법 
frequencies = frequencies.sort_by do |x, y|
    x


--------

histogram

@함수
def nameOfFunc(parameter)
	contents
end

numeOfFunc(argument)


@sorting
숫자든 string이든 그냥 .sort!


@ordering your library
def alphabetize(arr, rev=false)
  if rev
    arr.sort { |item1, item2| item2 <=> item1 }
  else
    arr.sort { |item1, item2| item1 <=> item2 }
  end
end

books = ["Heart of Darkness", "Code Complete", "The Lorax", "The Prophet", "Absalom, Absalom!"]

puts "A-Z: #{alphabetize(books)}"
puts "Z-A: #{alphabetize(books, true)}"


@@함수내에서 return을 따로 지정해주지않아도 가장 마지막 라인이 return value가 된다. 

@ symbol

puts "string".object_id
puts "string".object_id

puts :symbol.object_id
puts :symbol.object_id

string은 같은 이름의 string이 여러개 존재할 수 있지만(여러개의 주소)
symbol은 단 하나의 object ID 만 가진다. 

They're immutable, meaning they can't be changed once they're created;
Only one copy of any symbol exists at a given time, so they save memory;
Symbol-as-keys are faster than strings-as-keys because of the above two reasons.
심볼이 string보다 수행시간도 빠르다. 변하지않고, 단하나만 존재하기때문에

@ .to_sym (.intern 으로도 씀 internalize)
strings.map{ |x| x.to_sym } 와
strings.map!{ |x| x.to_sym } 의 차이점 숙지

@ruby 1.9 이후 새로운 hash 스타일(with symbol)
movies = {
    interstella:"quantum theory",
    coungpu:"more than action",
    bondgirl:"sexy"
    }
    
    

@ hash key나 value만 뽑아내기
my_hash = { one: 1, two: 2, three: 3 }

my_hash.each_key { |k| print k, " " }
# ==> one two three

my_hash.each_value { |v| print v, " " }
# ==> 1 2 3





 @ movies.delete(title)
 
 Hash의 delete function


@ Simpler if

expression if boolean

ruby의 oneline if 는 문장 뒤에붙는다.
그리고 end 가 필요하지않다.

@ ternary conditional expression

boolean ? Do this if true: Do this if false
eg)
puts 3 < 4 ? "3 is less than 4!" : "3 is not less than 4."
	puts 인경우 puts 이후 boolean, true실행, false실행 순인걸 확인
	
	
@ Case 문 작성 

case language
when "JS"
  puts "Websites!"
when "Python"
  puts "Science!"
when "Ruby"
  puts "Web apps!"
else
  puts "I don't know!"
end

@ 더 축약해서 one line when then 

case language
  when "JS" then puts "Websites!"
  when "Python" then puts "Science!"
  when "Ruby" then puts "Web apps!"
  else puts "I don't know!"
end

@ Conditional Assignment Operator
	함수 내 파라미터에 대해 default 값을 설정할 때 용이
favorite_book ||= "Cat's Cradle"
puts favorite_book

변수가 nil 이면 넣고 뭔가 들어잇으면 유지하고 다음라인으로 수행

@ Implicit Return

함수에서 return을 지정하지 않아도 마지막 라인을 리턴한다. 
javascript 는 undefined, python은 none 을 리턴하지만 루비는 스마트하다.


@ Short-Circuit Evaluation

def a
  puts "A was evaluated!"
  return true
end

def b
  puts "B was also evaluated!"
  return true
end

puts a || b	// a만 실행 thats enough
puts "------"
puts a && b	// b까지 실행해봐야 알수있다.

@ for문은 저리가라

5.times { puts "Odelay!" }

@ .upto() and .downto()

95.upto(100) { |num| print num, " " }
# Prints 95 96 97 98 99 100

"L".upto("P") {|x| puts x}

string에도 사용가능하다.

@ .redpond_to?(:function name)

[1, 2, 3].respond_to?(:to_sym)	//false

이 object가 함수를 가지고 있는지 boolean 으로 나타낸다. 함수이름은 유일하므로 symbol을 사용

@ << concatenation operator (the shovel)
	.push 나 string의 += 연산자를 << 로 간단하게 대체

alphabet = ["a", "b", "c"]
	//# alphabet.push("d") # Update me
alphabet << "d" # Update me!

caption = "A giraffe surrounded by "
	//# caption += "weezards!" # Me, too!
caption << "weezards!" # Me, too!

@ String Interpolation

"I love #{drink}."
# ==> I love espresso.
"I am #{age} years old."
# ==> I am 26 years old.

@ 소수를 구하라(refactorying)

require 'prime'

def first_n_primes(n)
  # Check for correct input!
  "n must be an integer" unless n.is_a? Integer
  "n must be greater than 0" if n <= 0

  # The Ruby 1.9 Prime class makes the array automatically!
  prime = Prime.instance
  prime.first n
end

first_n_primes(10)

@ collect
	map과 다른개념이 뭔지 아직 잘 모르겠다.
my_nums.collect! { |num| num ** 2 }
# ==> [1, 4, 9]
my_nums
# ==> [1, 4, 9]

@ yield 블럭을 가진 함수의 구조

def yield_name(name)
  puts "In the method! Let's yield."
  yield("Kim")
  puts "In between the yields!"
  yield(name)
  puts "Block complete! Back in the method."
end

yield_name("Eric") { |n| puts "My name is #{n}." }

	In the method! Let's yield.
	My name is Kim.
	In between the yields!
	My name is Eric.
	Block complete! Back in the method.

@ proc : "saved" block

	장점 1. 완전한 객체로서 모든 기능을 사용할 수 있다. 
	     2. 반복사용 할 수 있다. 

cube = Proc.new { |x| x ** 3 }

[1, 2, 3].collect!(&cube)
# ==> [1, 8, 27]
[4, 5, 6].map!(&cube)
# ==> [64, 125, 216]

@ .call

	call 을 사용하여 proc을 바로 사용할 수 도 있다.
	
hi = Proc.new{puts "Hello!"}
hi.call  # 1.times(&hi) 같은 느낌?

@ Symbols, Meet Procs (with handy little &)

strings = ["1", "2", "3"]
nums = strings.map(&:to_i)
# ==> [1, 2, 3]


@ lambda (proc과 거의 유사)

lambda { puts "Hello!" }
===
Proc.new { puts "Hello!" }


@ proc 과 lambda 의 차이

	1. lambda 는 params의 갯수를 세서 다르면 에러를 도출.
		proc은 갯수 다르면 그건 그냥 nil로 처리하고 진행
	2. lambda는 javasciprt 처럼 함수를 실행하도록 두고 나중에 callback 하지만
		proc은 proc 블럭 내의 내용들을 바로 실행한다.\
		
eg)

def batman_ironman_proc
  victor = Proc.new { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end

puts batman_ironman_proc	#-> Batman will win!

def batman_ironman_lambda
  victor = lambda { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end

puts batman_ironman_lambda	#-> Iron Man will win!

@ is_a? type

	타입인지 확인하여 boolean을 리턴한다.
	
:hello.is_a? Symbol
# ==> true


@ select 문 

블록이 true 값을 가지는 원소로 이루어진 새 배열을 리턴

my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]

# Add your code below!

symbol_filter = lambda{|x| x.is_a? Symbol}
symbols = my_array.select(&symbol_filter)

	@ Object Oriented Programming
@ Class

A class is just a way of organizing and producing objects with similar attributes and methods.

class NewClass
  def initialize
        
    end
end



@ Object

Objects have methods, which you've seen before, and attributes, which are just data

@ @ means instance variable

	it will have variable only for each object instance
	
@@@	

global variables($ or define outta class) :	variables that are available everywhere 


local variables	 :	only available certain methods 


class variables(@@)	 :	members of a certain class (instance 갯수 카운팅할때 쓸수 있다.)


instance variables(@) :	only available to particular instances of a class 


@ 인스턴스 갯수 세기 with class variable

class Person
  # Set your class variable to 0 on line 3
  @@people_count = 0
  
  def initialize(name)
    @name = name
    # Increment your class variable on line 8
    @@people_count+=1
  end
  
  def self.number_of_instances
    # Return your class variable on line 13
    @@people_count
  end
end

matz = Person.new("Yukihiro")
dhh = Person.new("David")

puts "Number of Person instances: #{Person.number_of_instances}"

@ Inheritance

	class DerivedClass < BaseClass
	  # Some stuff!
	end

	ApplicationError is a SuperBadError

class ApplicationError
  def display_error
    puts "Error! Error!"
  end
end

class SuperBadError < ApplicationError
end

err = SuperBadError.new
err.display_error

@ override

class Creature
  def initialize(name)
    @name = name
  end
  
  def fight
    return "Punch to the chops!"
  end
end

# Add your code below!
class Dragon < Creature
    def fight
        return "Breathes fire!"
    end
end


@ superclass

class DerivedClass < Base
  def some_method
    super(optional args)
      # Some stuff
    end
  end
end

	eg)
			class Creature
			  def initialize(name)
			    @name = name
			  end
			  
			  def fight
			    return "Punch to the chops!"
			  end
			end
			
			# Add your code below!
			class Dragon < Creature
			    def fight
			        puts "Instead of breathing fire..."
			        super		## 여기서는 superclass가 params를 가지고있지않기 때문에 super만 쓰지만
			    end			## params를 가지고 super ~ end 구문으로 쓸 수 있다.
			end
			
			dragon = Dragon.new("qkqh")
			
			dragon.fight



@ one-line class 선언 

class Dragon < Creature; end

@ ruby 는 single inheritance 만 존재한다.

	
class Dragon < Creature; end
class Dragon < Person; end
	두개이상 상속받으려하면
	superclass mismatch for class Dragon
	
이를 해결하기위해 나중에 mixins 를 배움

@ 20/20 은 이해가안간다 다시공부


@ class method

	class 당 하나만 존재, class variable(@@)를 사용하기 위함
	생성시, 사용시 모두 클래스명.클래스함수()
	
	class Machine
	  def Machine.hello
	    puts "Hello from the machine!"
	  end
	end
	
@ public and private
	private 함수는 클래스 내에서만 호출가능
	
@ attr_reader, attr_writer
	기본적으로 instance variable을 가져오기 위해서는
	
	def name	#java의 getter
	  @name
	end
	
	def name=(value)	#java의 setter(함수이름= 는 ruby의 convention)
	  @name = value
	end
	
하지만 더 간단하게

	class Person
	  attr_reader :name
	  attr_writer :name
	  def initialize(name)
	    @name = name
	  end
	end
	
	!
	
접근은 그대로 instance.varName 혹은 = newVal
로 읽고 쓰기가 가능하다
즉 
attr_reader : 읽기전용
attr_writer : 쓰기전용
attr_accessor : 둘다 가능 

을 나타낸다.


@ Module

상수와 함수들을 저장해놓고 언제든지 쓸 수 있다.

	클래스와 다른점
	1. instance 를 생성할 수 없다.
	2. subclass를 가질 수 없다.
	
모듈이 파라미터로 변수를 가지는건 말도 안된다.
constants(상수)만을 가진다. 모두 대문자이며 단어사이에 underscore 사용 가능

	eg)
	module MyLibrary
	
	    FAVE_BOOK="Pabane"
	    
	end


@ namespacing

separate methods and constants into named spaces

with
	@ scope resolution operator
	
	eg) Math::PI
	
@ require

Math 는 기본 interpreter 에 존재하지만
그 이외의 Module을 추가하고 싶을 때
	require 'module'
	
@ 클래스 안의 include

클래스안에서 중복되어 모듈을 사용하여야 할 경우에는 include 하여 함수를 사용할 수 있다.
이 경우에 namespacing은 필요없다.

	class Angle
	  include Math
	  attr_accessor :radians
	  
	  def initialize(radians)
	    @radians = radians
	  end
	  
	  def cosine
	    cos(@radians)
	  end
	end
	
	acute = Angle.new(1)
	acute.cosine

@ mixin(instance level)

다중상속 대신에 module 을 사용하는 것

# Create your module here!
module MartialArts
    def swordsman
        puts "I'm a swordsman"
    end
end
    
class Ninja
    include MartialArts
  def initialize(clan)
    @clan = clan
  end
end

class Samurai
    include MartialArts
  def initialize(shogun)
    @shogun = shogun
  end
end

@ extend (class level function)
	mixin 과는 다르게 class level의 함수를 사용 할 수 있도록 한다. 

module ThePresent
  def now
    puts "It's #{Time.new.hour > 12 ? Time.new.hour - 12 : Time.new.hour}:#{Time.new.min} #{Time.new.hour > 12 ? 'PM' : 'AM'} (GMT)."
  end
end

class TheHereAnd
  extend ThePresent
end

TheHereAnd.now

@ optional parameter
	balance||= 100 처럼 초기값에 활용

def initialize(name, balance=100)
  @name = name
  @balance = balance

@ 숫자 표기법

1_000_000 처럼 큰 숫자들을 _ 로 구분해도 루비는 인식한다.











	


